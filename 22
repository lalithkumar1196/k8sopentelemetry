apiVersion: v1
kind: ServiceAccount
metadata:
  name: otel-collector
  namespace: default

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: otel-collector
  namespace: default
rules:
  -
    apiGroups:
      - ""
      - apps
      - autoscaling
      - batch
      - extensions
      - policy
      - rbac.authorization.k8s.io
    resources:
      - componentstatuses
      - configmaps
      - daemonsets
      - deployments
      - events
      - cronjobs
      - statefulsets
      - endpoints
      - horizontalpodautoscalers
      - ingress
      - jobs
      - limitranges
      - namespaces
      - nodes
      - pods
      - nodes/stats
      - persistentvolumes
      - persistentvolumeclaims
      - resourcequotas
      - replicasets
      - replicationcontrollers
      - serviceaccounts
      - services
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: otel-collector
  namespace: default
subjects:
  - kind: ServiceAccount
    name: otel-collector
    namespace: default
roleRef:
  kind: ClusterRole
  name: otel-collector
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector
  namespace: default
data:
  config.yaml: |
    receivers:
      prometheus:
        config:
          scrape_configs:
            - job_name: 'otel-collector'
              scrape_interval: 5s
              static_configs:
                - targets: ['0.0.0.0:8888']
            - job_name: k8s
              kubernetes_sd_configs:
                - role: pod
              relabel_configs:
                - source_labels: [__meta_kubernetes_pod]
                  regex: "true"
                  action: keep
              metric_relabel_configs:
                - source_labels: [__name__]
                  regex: "(request_duration_seconds.*|response_duration_seconds.*)"
                  action: keep
            - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
              job_name: integrations/kubernetes/cadvisor
              kubernetes_sd_configs:
                - role: node
              relabel_configs:
                - replacement: kubernetes.default.svc.cluster.local:443
                  target_label: __address__
                - regex: (.+)
                  replacement: /api/v1/nodes/$${1}/proxy/metrics/cadvisor
                  source_labels:
                    - __meta_kubernetes_node_name
                  target_label: __metrics_path__
              scheme: https
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: true
                server_name: kubernetes
            - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
              job_name: integrations/kubernetes/kubelet
              kubernetes_sd_configs:
                - role: node
              relabel_configs:
                - replacement: kubernetes.default.svc.cluster.local:443
                  target_label: __address__
                - regex: (.+)
                  replacement: /api/v1/nodes/$${1}/proxy/metrics
                  source_labels:
                    - __meta_kubernetes_node_name
                  target_label: __metrics_path__
              scheme: https
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: true
                server_name: kubernetes
            - job_name: integrations/kubernetes/kube-state-metrics
              kubernetes_sd_configs:
                - role: pod
              relabel_configs:
                - action: keep
                  regex: kube-state-metrics
                  source_labels:
                    - __meta_kubernetes_pod_label_app_kubernetes_io_name
            - job_name: integrations/node_exporter
              kubernetes_sd_configs:
                - namespaces:
                    names:
                      - default
                  role: pod
              relabel_configs:
                - action: keep
                  regex: prometheus-node-exporter.*
                  source_labels:
                    - __meta_kubernetes_pod_label_app_kubernetes_io_name
                - action: replace
                  source_labels:
                    - __meta_kubernetes_pod_node_name
                  target_label: instance
                - action: replace
                  source_labels:
                    - __meta_kubernetes_namespace
                  target_label: namespace       
      kubeletstats:
        collection_interval: 10s
        auth_type: "serviceAccount"
        insecure_skip_verify: true
        endpoint: "https://${env:K8S_NODE_NAME}:10250"
        metric_groups:
          - node
          - pod 
          - container     
      hostmetrics:
        collection_interval: 10s
        scrapers:
          load:
          filesystem:
          memory:
          network:
          disk:
          cpu:
      k8s_cluster:
        collection_interval: 10s
      k8s_events:
        namespaces: [default, my_namespace]
      filelog:
        include:
          - /var/log/pods/*/*/*.log
        exclude:
          - /var/log/pods/*/otel-collector/*.log
        start_at: beginning
        include_file_path: true
        include_file_name: false
        operators:
          - type: router
            id: get-format
            routes:
              - output: parser-docker
                expr: 'body matches "^\\{"'
              - output: parser-crio
                expr: 'body matches "^[^ Z]+ "'
              - output: parser-containerd
                expr: 'body matches "^[^ Z]+Z"'
          - type: regex_parser
            id: parser-crio
            regex: '^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout_type: gotime
              layout: '2006-01-02T15:04:05.999999999Z07:00'
          - type: regex_parser
            id: parser-containerd
            regex: '^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          - type: json_parser
            id: parser-docker
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          - type: move
            from: attributes.log
            to: body
          - type: regex_parser
            id: extract_metadata_from_filepath
            regex: '^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$'
            parse_from: attributes["log.file.path"]
            cache:
              size: 128
          - type: move
            from: attributes.stream
            to: attributes["log.iostream"]
          - type: move
            from: attributes.container_name
            to: resource["k8s.container.name"]
          - type: move
            from: attributes.namespace
            to: resource["k8s.namespace.name"]
          - type: move
            from: attributes.pod_name
            to: resource["k8s.pod.name"]
          - type: move
            from: attributes.restart_count
            to: resource["k8s.container.restart_count"]
          - type: move
            from: attributes.uid
            to: resource["k8s.pod.uid"]
           
        attributes:
          service.name: "kubernetes"   
    processors:
      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: true
        filter:
          node_from_env_var: KUBE_NODE_NAME
        extract:
          metadata:
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.deployment.name
            - k8s.namespace.name
            - k8s.node.name            
            - k8s.pod.start_time
          labels:
            - tag_name: app.label.component
              key: app.kubernetes.io/component
              from: pod
        pod_association:
          - sources:
              - from: resource_attribute
                name: k8s.pod.ip
          - sources:
              - from: resource_attribute
                name: k8s.pod.uid
          - sources:
              - from: connection  
      resourcedetection:
        detectors:
            - env
            - ec2
            - system
            - docker
        timeout: 5s
        override: false          
      attributes/logs:
        actions:
            - key: source
              from_attribute: name
              action: upsert
            - key: source
              from_attribute: operator_type
              action: upsert
            - key: source
              from_attribute: log.file.name
              action: upsert
            - key: source
              from_attribute: fluent.tag
              action: upsert
            - key: source
              from_attribute: service.name
              action: upsert
            - key: source
              from_attribute: project.name
              action: upsert
            - key: source
              from_attribute: serviceName
              action: upsert
            - key: source
              from_attribute: projectName
              action: upsert
            - key: source
              from_attribute: pod_name
              action: upsert
            - key: source
              from_attribute: container_name
              action: upsert
            - key: source
              from_attribute: namespace
              action: upsert



    exporters:
      prometheusremotewrite:
          - endpoint: 'https://1214480:glc_eyJvIjoiOTU2NDE4IiwibiI6InN0YWNrLTc1MzI4Ni1obS13cml0ZS1sYWxpdGgiLCJrIjoiMmpmcTg4VDBuM0hWbjZYOTdDeDdZMlB1IiwibSI6eyJyIjoicHJvZC11cy1lYXN0LTAifX0=@prometheus-prod-13-prod-us-east-0.grafana.net/api/prom/push'
          - endpoint: 'https://595691:glc_eyJvIjoiNzIwMTA5IiwibiI6InN0YWNrLTQ0NzQ2MC1obS13cml0ZS10ZXN0IiwiayI6IlE3cDQ2Z0d0REJwQVg1NEd1NDIxZHA2MiIsIm0iOnsiciI6InVzIn19@prometheus-prod-10-prod-us-central-0.grafana.net/api/prom/push'
      otlphttp:
        endpoint: 'https://otel.kloudmate.dev:4318'
        headers:
          Authorization: sk_vxrYdBQVm72u7NgHfUTP3XoG

    service:
      pipelines:
        metrics:
          receivers: [prometheus, kubeletstats, hostmetrics, k8s_cluster]
          exporters: [otlphttp, prometheusremotewrite]
        logs:
          receivers: [ filelog, k8s_events]
          processors: [k8sattributes, resourcedetection, attributes/logs]
          exporters: [otlphttp]

---
apiVersion: apps/v1
kind: DaemonSet

metadata:
  name: otel-collector
  namespace: default
spec:
  selector:
    matchLabels:
      app: otel-collector
  template:
    metadata:
      labels:
        app: otel-collector
    spec:
      serviceAccountName: otel-collector
      containers:
        - name: otel-collector
          image: otel/opentelemetry-collector-contrib:latest
          args: ["--config=/etc/otel-collector-config/config.yaml"]
          env:
            - name: K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: config-vol
              mountPath: /etc/otel-collector-config
            - name: varlogpods
              mountPath: /var/log/pods
              readOnly: true
            - name: varlibdockercontainers
              mountPath: /var/lib/docker/containers
              readOnly: true
            - name: varlogcontainers
              mountPath: /var/log/containers
              readOnly: true  
      volumes:
        - name: config-vol
          configMap:
            name: otel-collector
        - name: varlogpods
          hostPath:
            path: /var/log/pods
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers
        - name: varlogcontainers
          hostPath:
            path: /var/log/containers    

      securityContext:
        runAsUser: 0
---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  namespace: default
spec:
  selector:
    app: otel-collector
  ports:
    - name: port-4317
      protocol: TCP
      port: 4317
      targetPort: 4317
    - name: port-4318
      protocol: TCP
      port: 4318
      targetPort: 4318


